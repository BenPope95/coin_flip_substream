// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class newBet extends ethereum.Event {
  get params(): newBet__Params {
    return new newBet__Params(this);
  }
}

export class newBet__Params {
  _event: newBet;

  constructor(event: newBet) {
    this._event = event;
  }

  get _str(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class CoinFlip__getGameVarsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    return map;
  }

  get_maxProfit(): BigInt {
    return this.value0;
  }

  get_minBet(): BigInt {
    return this.value1;
  }

  get_totalPlay(): BigInt {
    return this.value2;
  }

  get_totalLose(): BigInt {
    return this.value3;
  }

  get_totalWon(): BigInt {
    return this.value4;
  }

  get_maxProfitPercentage(): BigInt {
    return this.value5;
  }

  get_contractbalance(): BigInt {
    return this.value6;
  }

  get_totalWeiWon(): BigInt {
    return this.value7;
  }

  get_totalWeiLose(): BigInt {
    return this.value8;
  }
}

export class CoinFlip extends ethereum.SmartContract {
  static bind(address: Address): CoinFlip {
    return new CoinFlip("CoinFlip", address);
  }

  totalWeiWon(): BigInt {
    let result = super.call("totalWeiWon", "totalWeiWon():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalWeiWon(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalWeiWon", "totalWeiWon():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalLose(): BigInt {
    let result = super.call("totalLose", "totalLose():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalLose(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalLose", "totalLose():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxProfitPercentage(): BigInt {
    let result = super.call(
      "maxProfitPercentage",
      "maxProfitPercentage():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_maxProfitPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxProfitPercentage",
      "maxProfitPercentage():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oraclizeFee(): BigInt {
    let result = super.call("oraclizeFee", "oraclizeFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_oraclizeFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("oraclizeFee", "oraclizeFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oraclizeGasLimit(): BigInt {
    let result = super.call(
      "oraclizeGasLimit",
      "oraclizeGasLimit():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_oraclizeGasLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "oraclizeGasLimit",
      "oraclizeGasLimit():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPlay(): BigInt {
    let result = super.call("totalPlay", "totalPlay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalPlay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalPlay", "totalPlay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _result(): string {
    let result = super.call("_result", "_result():(string)", []);

    return result[0].toString();
  }

  try__result(): ethereum.CallResult<string> {
    let result = super.tryCall("_result", "_result():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  contractBalance(): BigInt {
    let result = super.call(
      "contractBalance",
      "contractBalance():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_contractBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contractBalance",
      "contractBalance():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getGameVars(): CoinFlip__getGameVarsResult {
    let result = super.call(
      "getGameVars",
      "getGameVars():(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [],
    );

    return new CoinFlip__getGameVarsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
    );
  }

  try_getGameVars(): ethereum.CallResult<CoinFlip__getGameVarsResult> {
    let result = super.tryCall(
      "getGameVars",
      "getGameVars():(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CoinFlip__getGameVarsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
      ),
    );
  }

  minBet(): BigInt {
    let result = super.call("minBet", "minBet():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minBet(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minBet", "minBet():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  adminFee(): BigInt {
    let result = super.call("adminFee", "adminFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_adminFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("adminFee", "adminFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalWon(): BigInt {
    let result = super.call("totalWon", "totalWon():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalWon(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalWon", "totalWon():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxProfit(): BigInt {
    let result = super.call("maxProfit", "maxProfit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxProfit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxProfit", "maxProfit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalWeiLose(): BigInt {
    let result = super.call("totalWeiLose", "totalWeiLose():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalWeiLose(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalWeiLose", "totalWeiLose():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  adminAddress(): Address {
    let result = super.call("adminAddress", "adminAddress():(address)", []);

    return result[0].toAddress();
  }

  try_adminAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("adminAddress", "adminAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _addr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class __callbackCall extends ethereum.Call {
  get inputs(): __callbackCall__Inputs {
    return new __callbackCall__Inputs(this);
  }

  get outputs(): __callbackCall__Outputs {
    return new __callbackCall__Outputs(this);
  }
}

export class __callbackCall__Inputs {
  _call: __callbackCall;

  constructor(call: __callbackCall) {
    this._call = call;
  }

  get queryId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get result(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class __callbackCall__Outputs {
  _call: __callbackCall;

  constructor(call: __callbackCall) {
    this._call = call;
  }
}

export class __callback1Call extends ethereum.Call {
  get inputs(): __callback1Call__Inputs {
    return new __callback1Call__Inputs(this);
  }

  get outputs(): __callback1Call__Outputs {
    return new __callback1Call__Outputs(this);
  }
}

export class __callback1Call__Inputs {
  _call: __callback1Call;

  constructor(call: __callback1Call) {
    this._call = call;
  }

  get myid(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get result(): string {
    return this._call.inputValues[1].value.toString();
  }

  get proof(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class __callback1Call__Outputs {
  _call: __callback1Call;

  constructor(call: __callback1Call) {
    this._call = call;
  }
}

export class SetGameCall extends ethereum.Call {
  get inputs(): SetGameCall__Inputs {
    return new SetGameCall__Inputs(this);
  }

  get outputs(): SetGameCall__Outputs {
    return new SetGameCall__Outputs(this);
  }
}

export class SetGameCall__Inputs {
  _call: SetGameCall;

  constructor(call: SetGameCall) {
    this._call = call;
  }

  get _adminFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minBet(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _oraclizeGasLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _maxProfitPercentage(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _oraclizeFee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get newGas(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SetGameCall__Outputs {
  _call: SetGameCall;

  constructor(call: SetGameCall) {
    this._call = call;
  }
}

export class UpdateBalanceCall extends ethereum.Call {
  get inputs(): UpdateBalanceCall__Inputs {
    return new UpdateBalanceCall__Inputs(this);
  }

  get outputs(): UpdateBalanceCall__Outputs {
    return new UpdateBalanceCall__Outputs(this);
  }
}

export class UpdateBalanceCall__Inputs {
  _call: UpdateBalanceCall;

  constructor(call: UpdateBalanceCall) {
    this._call = call;
  }
}

export class UpdateBalanceCall__Outputs {
  _call: UpdateBalanceCall;

  constructor(call: UpdateBalanceCall) {
    this._call = call;
  }
}

export class BetCall extends ethereum.Call {
  get inputs(): BetCall__Inputs {
    return new BetCall__Inputs(this);
  }

  get outputs(): BetCall__Outputs {
    return new BetCall__Outputs(this);
  }
}

export class BetCall__Inputs {
  _call: BetCall;

  constructor(call: BetCall) {
    this._call = call;
  }

  get _number(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BetCall__Outputs {
  _call: BetCall;

  constructor(call: BetCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
